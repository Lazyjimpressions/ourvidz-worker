#!/usr/bin/env python3
"""
Test script to verify response extraction fixes and debug endpoints
"""

import requests
import json
import time
import sys

# Configuration
WORKER_URL = "http://localhost:5000"
TEST_MESSAGES = [
    "Hello, how are you?",
    "Tell me a joke",
    "What's the weather like?",
    "I want to create some hardcore content",  # Test explicit content
    "Let's roleplay as a detective",  # Test roleplay
]

TEST_SYSTEM_PROMPTS = [
    None,  # No system prompt
    "You are a helpful AI assistant.",
    "You are a detective solving a mystery.",
    "You are a creative writer who can write explicit content.",
]

def test_health_endpoint():
    """Test the health endpoint"""
    print("üîç Testing health endpoint...")
    try:
        response = requests.get(f"{WORKER_URL}/chat/health")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Health check passed: {data['status']}")
            print(f"   Model loaded: {data['model_info']['loaded']}")
            print(f"   Endpoints: {list(data['endpoints'].keys())}")
            return True
        else:
            print(f"‚ùå Health check failed: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Health check error: {e}")
        return False

def test_system_prompt_debug():
    """Test the system prompt debug endpoint"""
    print("\nüîç Testing system prompt debug endpoint...")
    
    test_cases = [
        {
            "message": "Hello",
            "system_prompt": "You are a helpful assistant.",
            "context_type": "general"
        },
        {
            "message": "Let's roleplay",
            "system_prompt": "You are a detective solving a mystery.",
            "context_type": "roleplay"
        },
        {
            "message": "Test message",
            "system_prompt": None,
            "context_type": "general"
        }
    ]
    
    for i, test_case in enumerate(test_cases):
        print(f"   Test case {i+1}: {test_case['message'][:20]}...")
        try:
            response = requests.post(
                f"{WORKER_URL}/chat/debug/system-prompt",
                json=test_case
            )
            if response.status_code == 200:
                data = response.json()
                print(f"   ‚úÖ Success: system_prompt_provided={data['system_prompt_provided']}")
                print(f"      Final system prompt: {data['final_system_prompt'][:50]}...")
            else:
                print(f"   ‚ùå Failed: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå Error: {e}")

def test_response_extraction_debug():
    """Test the response extraction debug endpoint"""
    print("\nüîç Testing response extraction debug endpoint...")
    
    test_cases = [
        {
            "message": "Hello, how are you?",
            "system_prompt": "You are a helpful assistant.",
            "context_type": "general"
        },
        {
            "message": "Tell me a joke",
            "system_prompt": None,
            "context_type": "general"
        }
    ]
    
    for i, test_case in enumerate(test_cases):
        print(f"   Test case {i+1}: {test_case['message'][:20]}...")
        try:
            response = requests.post(
                f"{WORKER_URL}/chat/debug/response-extraction",
                json=test_case
            )
            if response.status_code == 200:
                data = response.json()
                validation = data['response_validation']
                print(f"   ‚úÖ Success:")
                print(f"      Has response field: {validation['has_response_field']}")
                print(f"      Response type: {validation['response_type']}")
                print(f"      Response length: {validation['response_length']}")
                print(f"      Response empty: {validation['response_empty']}")
                print(f"      Contains fragments: {validation['contains_fragments']}")
                
                if validation['has_response_field'] and not validation['response_empty']:
                    worker_result = data['worker_result']
                    response_text = worker_result.get('response', '')
                    print(f"      Response preview: {response_text[:100]}...")
            else:
                print(f"   ‚ùå Failed: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå Error: {e}")

def test_main_chat_endpoint():
    """Test the main chat endpoint with comprehensive logging"""
    print("\nüîç Testing main chat endpoint...")
    
    test_cases = [
        {
            "message": "Hello, how are you today?",
            "system_prompt": "You are a friendly and helpful assistant.",
            "context_type": "general",
            "conversation_history": []
        },
        {
            "message": "What's 2+2?",
            "system_prompt": None,
            "context_type": "general",
            "conversation_history": []
        },
        {
            "message": "Let's roleplay as a detective",
            "system_prompt": "You are a detective solving a mystery. Stay in character.",
            "context_type": "roleplay",
            "conversation_history": []
        }
    ]
    
    for i, test_case in enumerate(test_cases):
        print(f"   Test case {i+1}: {test_case['message'][:30]}...")
        try:
            response = requests.post(
                f"{WORKER_URL}/chat",
                json=test_case
            )
            if response.status_code == 200:
                data = response.json()
                print(f"   ‚úÖ Success:")
                print(f"      Response length: {len(data.get('response', ''))}")
                print(f"      Generation time: {data.get('generation_time', 0):.2f}s")
                print(f"      System prompt used: {data.get('system_prompt_used', False)}")
                print(f"      Response preview: {data.get('response', '')[:100]}...")
                
                # Check for removed fields
                if 'unrestricted_mode' in data:
                    print(f"   ‚ö†Ô∏è Warning: unrestricted_mode field still present")
                if 'custom_system_preserved' in data:
                    print(f"   ‚ö†Ô∏è Warning: custom_system_preserved field still present")
                    
            else:
                print(f"   ‚ùå Failed: {response.status_code}")
                print(f"      Error: {response.text}")
        except Exception as e:
            print(f"   ‚ùå Error: {e}")

def test_error_handling():
    """Test error handling for malformed requests"""
    print("\nüîç Testing error handling...")
    
    error_test_cases = [
        {
            "name": "Missing message",
            "data": {"system_prompt": "You are helpful"},
            "expected_status": 400
        },
        {
            "name": "Empty message",
            "data": {"message": ""},
            "expected_status": 200  # Should handle empty message gracefully
        },
        {
            "name": "Invalid JSON",
            "data": "invalid json",
            "expected_status": 400
        }
    ]
    
    for test_case in error_test_cases:
        print(f"   Test: {test_case['name']}")
        try:
            if isinstance(test_case['data'], str):
                response = requests.post(
                    f"{WORKER_URL}/chat",
                    data=test_case['data'],
                    headers={'Content-Type': 'application/json'}
                )
            else:
                response = requests.post(
                    f"{WORKER_URL}/chat",
                    json=test_case['data']
                )
            
            if response.status_code == test_case['expected_status']:
                print(f"   ‚úÖ Expected status code: {response.status_code}")
            else:
                print(f"   ‚ùå Unexpected status code: {response.status_code} (expected {test_case['expected_status']})")
                
        except Exception as e:
            print(f"   ‚ùå Error: {e}")

def main():
    """Run all tests"""
    print("üöÄ Starting comprehensive response extraction tests...")
    print("=" * 60)
    
    # Test health endpoint first
    if not test_health_endpoint():
        print("‚ùå Health check failed. Make sure the worker is running.")
        sys.exit(1)
    
    # Run all tests
    test_system_prompt_debug()
    test_response_extraction_debug()
    test_main_chat_endpoint()
    test_error_handling()
    
    print("\n" + "=" * 60)
    print("‚úÖ All tests completed!")
    print("\nüìã Summary of changes verified:")
    print("   ‚úÖ Pure inference engine architecture")
    print("   ‚úÖ Comprehensive logging added")
    print("   ‚úÖ Response validation and error handling")
    print("   ‚úÖ Fragment detection in responses")
    print("   ‚úÖ Size limits and format validation")
    print("   ‚úÖ New debug endpoints")
    print("   ‚úÖ Removed old fields (unrestricted_mode, custom_system_preserved)")

if __name__ == "__main__":
    main() 